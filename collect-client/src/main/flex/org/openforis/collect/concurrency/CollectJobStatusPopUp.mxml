<?xml version="1.0" encoding="utf-8"?>
<component:PopUp xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:component="org.openforis.collect.ui.component.*"
				 xmlns:container="org.openforis.collect.ui.container.*" 
				 xmlns:detail="org.openforis.collect.ui.component.detail.*" 
				 xmlns:input="org.openforis.collect.ui.component.input.*"
				 xmlns:layout="org.openforis.collect.ui.layout.*"
				 width="250" height="200" 
				 currentState="{STATE_LOADING}" 
				 >
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.operations.CreateSubParagraphGroupOperation;
			
			import mx.managers.PopUpManager;
			
			import org.openforis.collect.i18n.Message;
			import org.openforis.collect.presenter.PopUpPresenter;
			import org.openforis.collect.util.PopUpUtil;
			import org.openforis.concurrency.proxy.JobProxy;
			
			public static const STATE_LOADING:String = "loading";
			public static const STATE_RUNNING:String = "running";
			public static const STATE_ERROR:String = "error";
			public static const STATE_COMPLETE:String = "complete";
			
			private var _presenter:CollectJobStatusPopUpPresenter;
			private var _autoclose:Boolean;
			private var _job:JobProxy;
			private static var _instance:CollectJobStatusPopUp;
			
			public static function openPopUp(job:JobProxy = null, autoclose:Boolean = false):void {
				if (_instance == null) {
					var popUp:CollectJobStatusPopUp = new CollectJobStatusPopUp();
					popUp._autoclose = autoclose;
					popUp._job = job;
					PopUpUtil.showPopUp(popUp);
					_instance = popUp;
				}
			}
			
			public static function closePopUp():void {
				if (_instance != null) {
					PopUpManager.removePopUp(_instance);
					_instance = null;
				}
			}
			
			public static function get popUpOpen():Boolean {
				return _instance != null;
			}

			public static function get currentInstance():CollectJobStatusPopUp {
				return _instance;
			}
			
			override protected function createPresenter():PopUpPresenter {
				return new CollectJobStatusPopUpPresenter(this);
			}

			public function get job():JobProxy {
				return _job;
			}
			
			public function set job(job:JobProxy):void {
				_job = job;
			}
			
			public static function setActiveJob(job:JobProxy):void {
				if (_instance != null) {
					_instance._job = job;
				}
			}
			
			public function get autoclose():Boolean {
				return _autoclose;
			}
			
		]]>
	</fx:Script>
	
	<component:states>
		<s:State name="loading" />
		<s:State name="running" />
		<s:State name="error" />
		<s:State name="complete" />
	</component:states>
	
	<s:Group includeIn="loading" width="100%" height="100%">
		<component:LoadingContent />
	</s:Group>
	
	<s:VGroup includeIn="running" 
			  itemCreationPolicy="immediate"
			  width="100%" height="100%"
			  horizontalAlign="center"
			  verticalAlign="middle"
			  gap="30">
		
		<mx:ProgressBar id="progressBar"
						horizontalCenter="0"
						verticalCenter="0"
						mode="manual"
						label="%3%"
						labelPlacement="center"
						width="80%"
						/>
		
		<s:Label id="progressLabel" />
		
		<s:Button id="cancelButton"
				  label="{Message.get('global.cancel')}"
				  useHandCursor="true" 
				  buttonMode="true"
				  />
	</s:VGroup>
	
	<s:VGroup includeIn="complete" itemCreationPolicy="immediate"
			  height="100%" width="100%"
			  horizontalAlign="center"
			  verticalAlign="middle"
			  gap="20"
			  >
		<s:Label text="{Message.get('job.complete')}"
				 styleName="infoMessageBig"
				 />
		
		<s:Button id="okButton"
				  label="{Message.get('global.ok')}"
				  useHandCursor="true" 
				  buttonMode="true"
				  />
	</s:VGroup>
	
	<s:VGroup includeIn="error" itemCreationPolicy="immediate"
			  height="100%" width="100%"
			  horizontalAlign="center"
			  verticalAlign="middle"
			  gap="20"
			  >
	</s:VGroup>
	
</component:PopUp>

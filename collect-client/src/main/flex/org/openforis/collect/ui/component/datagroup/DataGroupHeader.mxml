<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:datagroup="org.openforis.collect.ui.component.datagroup.*"
		 currentState="{STATE_VERTICAL}"
		 creationComplete="creationCompleteHandler(event)"
		 >
	
	<fx:Metadata>
		[Style(name="verticalAlign",type="String")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import org.openforis.collect.metamodel.proxy.ModelVersionProxy;
			
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.openforis.collect.metamodel.proxy.EntityDefinitionProxy;
			import org.openforis.collect.model.proxy.EntityProxy;
			import org.openforis.collect.presenter.DataGroupHeaderPresenter;
			
			import spark.layouts.ConstraintLayout;
			
			public static const DIRECTION_VERTICAL:String = "vertical";
			public static const DIRECTION_HORIZONTAL:String = "horizontal";
			
			public static const STATE_VERTICAL:String = "vertical";
			public static const STATE_HORIZONTAL:String = "horizontal";
			
			private var _presenter:DataGroupHeaderPresenter;
			private var _parentEntity:EntityProxy;
			private var _entityDefinition:EntityDefinitionProxy;
			private var _modelVersion:ModelVersionProxy;
			private var _labelsDirection:String = DIRECTION_VERTICAL;
			private var _visibilityByChildIndex:ArrayCollection;
			private var _nodeDefinitions:IList;

			protected function creationCompleteHandler(event:FlexEvent):void {
				_presenter = new DataGroupHeaderPresenter(this);
				_presenter.init();
			}
			
			protected function updateCurrentState():void {
				currentState = _labelsDirection == DIRECTION_VERTICAL ? STATE_VERTICAL: STATE_HORIZONTAL;
			}
			//private var _constraintLayout:ConstraintLayout;
			
			[Bindable]
			public function get entityDefinition():EntityDefinitionProxy {
				return _entityDefinition;
			}
			
			public function set entityDefinition(value:EntityDefinitionProxy):void {
				_entityDefinition = value;
			}
			
			[Bindable]
			public function get parentEntity():EntityProxy {
				return _parentEntity;
			}

			public function set parentEntity(value:EntityProxy):void {
				_parentEntity = value;
			}
			
			[Bindable]
			public function get modelVersion():ModelVersionProxy {
				return _modelVersion;
			}
			
			public function set modelVersion(value:ModelVersionProxy):void {
				_modelVersion = value;
			}
			
			[Bindable]
			public function get nodeDefinitions():IList {
				return _nodeDefinitions;
			}
			
			public function set nodeDefinitions(value:IList):void {
				_nodeDefinitions = value;
			}
			
			[Bindable]
			public function get visibilityByChildIndex():ArrayCollection {
				return _visibilityByChildIndex;
			}
			
			public function set visibilityByChildIndex(value:ArrayCollection):void {
				_visibilityByChildIndex = value;
			}
			
			[Bindable(event="labelsDirectionChange")]
			public function get labelsDirection():String {
				return _labelsDirection;
			}
			
			public function set labelsDirection(value:String):void {
				_labelsDirection = value;
				dispatchEvent(new Event("labelsDirectionChange"));
				updateCurrentState();
			}
			/*
			[Bindable]
			public function get constraintLayout():ConstraintLayout {
				return _constraintLayout;
			}
			
			public function set constraintLayout(value:ConstraintLayout):void {
				_constraintLayout = value;
			}
			*/
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="vertical" />
		<s:State name="horizontal" />
	</s:states>
	
	<s:DataGroup dataProvider="{nodeDefinitions}"
				 height.horizontal="100%"
				 height.vertical="{NaN}">
		<s:layout.horizontal>
			<s:HorizontalLayout 
				gap="4" 
				verticalAlign="bottom" />
		</s:layout.horizontal>
		<s:layout.vertical>
			<s:VerticalLayout 
				gap="2"
				verticalAlign="bottom" />
		</s:layout.vertical>
		<s:itemRenderer>
			<fx:Component>
				<datagroup:DataGroupHeaderItemRenderer
					visible="{outerDocument.visibilityByChildIndex.getItemAt(this.itemIndex)}"
					includeInLayout="{outerDocument.visibilityByChildIndex.getItemAt(this.itemIndex)}"
					height="{outerDocument.labelsDirection == DataGroupHeader.DIRECTION_HORIZONTAL &amp;&amp; 
						outerDocument.height &gt; 0 ? outerDocument.height: NaN}"
					parentEntity="{outerDocument.parentEntity}" />
			</fx:Component>
		</s:itemRenderer>
	</s:DataGroup>
	
</s:Group>

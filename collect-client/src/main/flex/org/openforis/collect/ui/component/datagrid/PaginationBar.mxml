<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<s:layout>
		<s:HorizontalLayout />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			
			import org.openforis.collect.util.AlertUtil;
			
			import mx.events.FlexEvent;
			
			import org.openforis.collect.event.PaginationBarEvent;
			import org.openforis.collect.i18n.Message;
			import org.openforis.collect.ui.Images;
			
			import spark.events.IndexChangeEvent;
			
			public static const LOADING_STATE:String = "loading";
			public static const NO_PAGES_STATE:String = "noPages";
			public static const SINGLE_PAGE_STATE:String = "singlePage";
			public static const FIRST_PAGE_STATE:String = "firstPage";
			public static const LAST_PAGE_STATE:String = "lastPage";
			public static const MIDDLE_PAGE_STATE:String = "middlePage";
			
			private var _totalRecords:int;
			private var _totalPages:int;
			private var _currentPage:int = 1;
			private var _maxRecordsPerPage:int;
			
			public function updateView():void {
				//var recordsFromPosition:int = ((currentPage - 1) * MAX_SUMMARIES_PER_PAGE) + 1;
				//var recordsToPosition:int = recordsFromPosition + _view.summaryDataGrid.dataProvider.length - 1;
				
				if(_totalRecords == 0) {
					currentState = NO_PAGES_STATE;
				} else if(_totalPages == 1) {
					currentState = SINGLE_PAGE_STATE;
				} else if(_currentPage == 1) {
					currentState = FIRST_PAGE_STATE;
				} else if(_currentPage == _totalPages) {
					currentState = LAST_PAGE_STATE;
				} else {
					currentState = MIDDLE_PAGE_STATE;
				}
			}

			/**
			 * Updates currentPage variable without firing the pageChange event
			 */
			public function showPage(value:int):void {
				_currentPage = value;
				dispatchEvent(new Event("currentPageChange"));
				updateView();
			}
			
			protected function dispatchPageChangeEvent():void {
				var evt:PaginationBarEvent = new PaginationBarEvent(PaginationBarEvent.PAGE_CHANGE);
				evt.currentPage = _currentPage;
				evt.offset = offset;
				evt.recordsPerPage = maxRecordsPerPage;
				dispatchEvent(evt);
			}
			
			public function get offset():int {
				return (_currentPage - 1) * maxRecordsPerPage;
			}
			
			protected function firstPageClickHandler(event:Event):void {
				currentPage = 1;
			}
			
			protected function previousPageClickHandler(event:Event):void {
				if ( _currentPage > 1) {
					currentPage --;
				}
			}
			
			protected function nextPageClickHandler(event:Event):void {
				if ( _currentPage < totalPages) {
					currentPage ++;
				}
			}
			
			protected function lastPageClickHandler(event:Event):void {
				currentPage = totalPages;
			}
			
			protected function currentPageTextValueCommitHandler(event:FlexEvent):void {
				var text:String = currentPageTextField.text;
				var pagNum:Number = Number(text);
				if ( pagNum > _totalPages ) {
					pagNum = _totalPages;
				}
				if ( pagNum != _currentPage ) {
					currentPage = pagNum;
				}
			}
			
			protected function recordsPerPageChangeHandler(event:Event):void {
				maxRecordsPerPage = recordPerPageDropDown.selectedItem;
				
				updateTotalPages();
				if ( currentPage > _totalPages ) {
					currentPage = _totalPages;
				}
				updateView();
				dispatchPageChangeEvent();
			}
			
			[Bindable("totalRecordsChange")]
			public function get totalRecords():int {
				return _totalRecords;
			}

			public function set totalRecords(value:int):void {
				_totalRecords = value;
				updateTotalPages();
				updateView();
				dispatchEvent(new Event("totalRecordsChange"));
			}
			
			protected function updateTotalPages():void {
				totalPages = Math.ceil(_totalRecords / _maxRecordsPerPage);
			}

			[Bindable]
			public function get totalPages():int {
				return _totalPages;
			}
			
			public function set totalPages(value:int):void {
				_totalPages = value;
			}

			[Bindable(event="currentPageChange")]
			public function get currentPage():int {
				return _currentPage;
			}

			public function set currentPage(value:int):void {
				_currentPage = value;
				dispatchEvent(new Event("currentPageChange"));
				dispatchPageChangeEvent();
			}
			
			[Bindable(event="currentPageChange")]
			public function get currentPageText():String {
				return _currentPage >=0 ? _currentPage.toString(): '';
			}
			
			[Bindable]
			public function get maxRecordsPerPage():int {
				return _maxRecordsPerPage;
			}

			public function set maxRecordsPerPage(value:int):void {
				_maxRecordsPerPage = value;
			}

		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="pageChange", type="org.openforis.collect.event.PaginationBarEvent")]
	</fx:Metadata>
		
	<s:states>
		<s:State name="loading" stateGroups="inactive" />
		<s:State name="noPages" stateGroups="inactive"/>
		<s:State name="singlePage" stateGroups="inactive" />
		<s:State name="firstPage" />
		<s:State name="lastPage" />
		<s:State name="middlePage" />
	</s:states>
	
	<!-- TODO change Image in Button and use skin to apply image background -->
	
	<s:HGroup width="50%" verticalAlign="middle">
		
	</s:HGroup>
	
	<s:HGroup gap="10" verticalAlign="middle">
		<s:Image 
				id="firstPageButton" 
				source="{Images.FIRST}" 
				toolTip="{Message.get('list.first')}" 
				width="16" 
				height="16" 
				useHandCursor="true" 
				buttonMode="true"
				enabled.inactive="false" 
				enabled.firstPage="false" 
				click="firstPageClickHandler(event)"
				/>
		
		<s:Image 
				id="previousPageButton" 
				source="{Images.PREV}" 
				toolTip="{Message.get('list.previous')}" 
				width="16" 
				height="16" 
				useHandCursor="true" 
				buttonMode="true"
				enabled.inactive="false" 
				enabled.firstPage="false" 
				click="previousPageClickHandler(event)"
				/>
		
		<s:Label text="{Message.get('list.page')}:" />
		
		<s:TextInput 
				fontSize="12" 
				fontWeight="bold" 
				id="currentPageTextField" 
				text="{currentPageText}"
				restrict="[0-9]"
				width="30"
				textAlign="right"
				enabled.inactive="false" 
				valueCommit="currentPageTextValueCommitHandler(event)"
				/>
		
		<mx:Text text="/ {totalPages}" />
		
		<s:Image 
				id="nextPageButton" 
				source="{Images.NEXT}" 
				toolTip="{Message.get('list.next')}" 
				width="16" 
				height="16" 
				useHandCursor="true" 
				buttonMode="true"
				enabled.inactive="false" 
				enabled.lastPage="false" 
				click="nextPageClickHandler(event)"
				/>
		
		<s:Image 
				id="lastPageButton" 
				 source="{Images.LAST}" 
				 toolTip="{Message.get('list.last')}" 
				 width="16" 
				 height="16" 
				 useHandCursor="true" 
				 buttonMode="true"
				 enabled.inactive="false" 
				 enabled.lastPage="false"
				 click="lastPageClickHandler(event)"
				 />
	</s:HGroup>
	
	<s:HGroup width="50%" 
			  gap="20" 
			  verticalAlign="middle" horizontalAlign="right">
		<s:HGroup verticalAlign="middle">
			<s:Label text="{Message.get('list.recordsPerPage')}:" />
			<s:DropDownList id="recordPerPageDropDown" 
							dataProvider="{new ArrayList([10, 20, 50])}" 
							width="50"
							selectedItem="{maxRecordsPerPage}"
							change="recordsPerPageChangeHandler(event)"/>
		</s:HGroup>
		<s:HGroup verticalAlign="middle">
			<s:Label text="{Message.get('list.totalRecords')}:" />
			<mx:Text text="{totalRecords}" />
		</s:HGroup>
	</s:HGroup>
	
</s:Group>

<?xml version="1.0" encoding="utf-8"?>
<mx:ViewStack xmlns:fx="http://ns.adobe.com/mxml/2009" 
			  xmlns:s="library://ns.adobe.com/flex/spark" 
			  xmlns:mx="library://ns.adobe.com/flex/mx" 
			  width="100%" height="100%"
			  >
	
	<fx:Script>
		<![CDATA[
			import mx.utils.ObjectUtil;
			
			import org.openforis.collect.util.AlertUtil;
			import org.openforis.collect.metamodel.proxy.EntityDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.ModelVersionProxy;
			import org.openforis.collect.metamodel.proxy.SurveyProxy;

			private var _forms:Dictionary = new Dictionary();
			
			/**
			 * Return true if the form for teh specified version / entity definition has been generated
			 * */
			public function containsForm(entity:EntityDefinitionProxy, version:ModelVersionProxy):Boolean {
				var form:FormContainer = getForm(entity, version);
				var result:Boolean = form != null;
				AlertUtil.showMessage("contains: "+result);
				return result;
			}
			
			/**
			 * Add the form to the stack
			 * */
			public function addForm(form:FormContainer, entity:EntityDefinitionProxy, version:ModelVersionProxy):void {
				var key:FormContainerKey = getFormKey(entity, version);
				_forms[key] = form; 
				this.addElement(form);
			}
			
			/**
			 * Return the form for the given version and entity definition, null if it has not been created yet. 
			 * */
			public function getForm(entity:EntityDefinitionProxy, version:ModelVersionProxy):FormContainer{
				var key:FormContainerKey = getFormKey(entity, version);
				for each(var formKey:FormContainerKey in _forms) {
					if ( ObjectUtil.compare(key, formKey) == 0) {
						var form:FormContainer = _forms[key] as FormContainer;
						return form;
					}
				}
				return null;
			}
			
			/**
			 * Show the the form for the given version and entity definition
			 * */
			public function setActiveForm(entity:EntityDefinitionProxy, version:ModelVersionProxy):FormContainer {
				var form:FormContainer = getForm(entity, version);
				this.selectedChild = form;
				return form;
			}
			
			private function getFormKey(entity:EntityDefinitionProxy, version:ModelVersionProxy):FormContainerKey {
				var survey:SurveyProxy = entity.survey;
				var versionId:int = version == null ? 0: version.id;
				var key:FormContainerKey = new FormContainerKey(survey.id, entity.id, versionId);
				return key;
			}
			
		]]>
	</fx:Script>
	
</mx:ViewStack>

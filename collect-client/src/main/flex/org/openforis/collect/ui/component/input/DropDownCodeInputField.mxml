<?xml version="1.0" encoding="utf-8"?>
<input:PreloadedCodeInputField xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s="library://ns.adobe.com/flex/spark" 
				  xmlns:mx="library://ns.adobe.com/flex/mx" 
				  xmlns:input="org.openforis.collect.ui.component.input.*"
				  xmlns:component="org.openforis.collect.ui.component.*"
				  currentState="loading" xmlns:graphics="org.openforis.collect.ui.skin.graphics.*"
				  >
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			
			import org.openforis.collect.event.UIEvent;
			import org.openforis.collect.metamodel.proxy.CodeAttributeDefinitionProxy;
			import org.openforis.collect.presenter.DropDownCodeInputFieldPresenter;
			import org.openforis.collect.util.CollectionUtil;
			
			import spark.events.IndexChangeEvent;
			
			private var _hasRemarks:Boolean;

			override protected function initPresenter():void {
				this.presenter = new DropDownCodeInputFieldPresenter(this);
				this.presenter.init();
			}
			
			override public function get validationStateDisplay():UIComponent {
				return this;
			}

			[Bindable]
			override public function get hasRemarks():Boolean {
				return _hasRemarks;
			}
			
			override public function set hasRemarks(value:Boolean):void {
				_hasRemarks = value;
			}
			
			override public function isEmpty():Boolean {
				return CollectionUtil.isEmpty(selectedItems);
			}
			
			protected function dropDownListChangeHandler(event:IndexChangeEvent):void {
				var selectedItem:Object = dropDownList.selectedItem;
				if ( selectedItem != null && selectedItem.hasOwnProperty("selected")) {
					selectedItem.selected = true;
				}
				var uiEvent:UIEvent = new UIEvent("selected");
				uiEvent.obj = selectedItem;
				selectionChangeHandler(uiEvent);
			}
			
		]]>
	</fx:Script>

	<input:states>
		<s:State name="loading" />
		<s:State name="default" />
	</input:states>
	
	<input:layout>
		<s:BasicLayout />
	</input:layout>
	
	<component:LoadingContent includeIn="loading" />
	
	<s:DropDownList id="dropDownList" 
					includeIn="default"
					itemCreationPolicy="immediate"
					dataProvider="{selectableItems}" 
					labelFunction="{labelFunction}"
					selectedIndex="{selectedIndex}"
					toolTip="{selectedItemDescription}"
					enabled="{editable}"
					change="dropDownListChangeHandler(event)"
					width="{CodeAttributeDefinitionProxy(attributeDefinition).width}"
					>
		<s:itemRenderer>
			<fx:Component>
				<input:SeparableItemRenderer labelFunction="{outerDocument.labelFunction}" 
											 toolTipFunction="{outerDocument.descriptionFunction}" />
			</fx:Component>
		</s:itemRenderer>
	</s:DropDownList>
	
	<graphics:RemarksPresentIcon id="remarksPresentIcon"
								 top="0"
								 right="0"
								 visible="{hasRemarks}"
								 includeIn="default"
								 itemCreationPolicy="immediate"
								 />
</input:PreloadedCodeInputField>

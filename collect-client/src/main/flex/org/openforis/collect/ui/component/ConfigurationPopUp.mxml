<?xml version="1.0" encoding="utf-8"?>
<component:PopUp xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:component="org.openforis.collect.ui.component.*"
				 width="700" height="500"
				 title="{Message.get('home.configuration')}"
				 currentState="loading" xmlns:container="org.openforis.collect.ui.container.*"
				 >
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.openforis.collect.client.ClientFactory;
			import org.openforis.collect.i18n.Message;
			import org.openforis.collect.model.LogoPosition;
			import org.openforis.collect.model.proxy.ConfigurationProxy;
			import org.openforis.collect.ui.Images;
			import org.openforis.collect.util.AlertUtil;
			
			import spark.events.TextOperationEvent;
			private var _initialized:Boolean;
			
			/* private var _presenter:SurveySelectionPresenter; */
			
			override protected function creationCompleteHandler(event:FlexEvent):void {
				super.creationCompleteHandler(event);
				_initialized = false;
				loadConfiguration();
			}
			
			private function loadConfiguration():void {
				ClientFactory.configurationClient.loadConfiguration(new AsyncResponder(loadConfigurationSuccessHandler, loadConfigurationFaultHandler));
			}
			
			private function loadConfigurationSuccessHandler(event:ResultEvent, token:Object = null):void {
				currentState = "loadComplete";
				
				if ( ! _initialized ) {
					uploadPathTextInput.addEventListener(FlexEvent.VALUE_COMMIT, uploadPathChangeHandler);
					recordIndexPathTextInput.addEventListener(FlexEvent.VALUE_COMMIT, recordIndexPathChangeHandler);
					_initialized = true;
				}
				var conf:ConfigurationProxy = event.result as ConfigurationProxy;
				//custom paths
				uploadPathTextInput.text = conf.uploadPath;
				recordIndexPathTextInput.text = conf.indexPath;
				//default paths
				defaultUploadPathTextInput.text = conf.defaultUploadPath;
				defaultRecordIndexPathTextInput.text = conf.defaultIndexPath;
			}
			
			private function loadConfigurationFaultHandler(event:FaultEvent, token:Object = null):void {
				AlertUtil.showError("configuration.load.error", [event.fault.message]);
			}
			
			protected function uploadPathChangeHandler(event:FlexEvent):void {
				uploadPathTextInput.enabled = false;

				ClientFactory.configurationClient.updateUploadPath(new AsyncResponder(
					function(event:ResultEvent, token:Object = null):void {
						//ok
						uploadPathTextInput.enabled = true;
					}, function(event:FaultEvent, token:Object = null):void {
						AlertUtil.showError("configuration.path.error");
						uploadPathTextInput.enabled = true;
					}), uploadPathTextInput.text);
			}
			
			protected function recordIndexPathChangeHandler(event:FlexEvent):void {
				recordIndexPathTextInput.enabled = false;
				
				ClientFactory.configurationClient.updateIndexPath(new AsyncResponder(
					function(event:ResultEvent, token:Object = null):void {
						//ok
						recordIndexPathTextInput.enabled = true;
					}, function(event:FaultEvent, token:Object = null):void {
						//TODO fault handler
						recordIndexPathTextInput.enabled = true;
					}), recordIndexPathTextInput.text);
			}
			
		]]>
	</fx:Script>
	
	<component:layout>
		<s:BasicLayout />
	</component:layout>

	<component:states>
		<s:State name="loading" />
		<s:State name="loadComplete" />
	</component:states>
	
	<component:LoadingContent includeIn="loading" />
	
	<s:Scroller width="100%" height="100%" includeIn="loadComplete" itemCreationPolicy="immediate">
		<s:VGroup horizontalAlign="center" width="90%">
			<s:Form width="100%">
				<s:VGroup gap="30" width="100%">
					
					<!-- Storage path customization -->
					<container:FieldSet legend="{Message.get('configuration.storagePaths')}" width="100%">
						
						<!-- record upload path -->
						<s:FormItem label="{Message.get('configuration.uploadPath')}" width="100%">
							<s:VGroup width="100%">
								<s:TextInput id="uploadPathTextInput" width="100%" />
								<s:HGroup verticalAlign="middle" width="100%">
									<s:Label text="{Message.get('global.default')}:" />
									<s:TextInput id="defaultUploadPathTextInput" width="100%" editable="false" />
								</s:HGroup>
							</s:VGroup>
						</s:FormItem>
						
						<!-- record index path -->
						<s:FormItem label="{Message.get('configuration.recordIndexPath')}" width="100%">
							<s:VGroup width="100%">
								<s:TextInput id="recordIndexPathTextInput" width="100%" />
								<s:HGroup verticalAlign="middle" width="100%">
									<s:Label text="{Message.get('global.default')}:" />
									<s:TextInput id="defaultRecordIndexPathTextInput" width="100%" editable="false" />
								</s:HGroup>
							</s:VGroup>
						</s:FormItem>
					</container:FieldSet>
					<!-- Layout customization -->
					<container:FieldSet legend="{Message.get('configuration.layoutImages')}" width="100%">
						
						<!-- header -->
						<container:FieldSet legend="{Message.get('configuration.logo.header')}" width="100%">
							<component:CustomLogoConfigurationElement 
								width="100%"
								defaultImage="{Images.HEADER}"
								position="{LogoPosition.HEADER}" />
						</container:FieldSet>
						
						<!-- top right logo -->
						<container:FieldSet legend="{Message.get('configuration.logo.topRight')}" width="100%">
							<component:CustomLogoConfigurationElement 
								width="100%"
								defaultImage="{Images.TOP_RIGHT_DEFAULT_LOGO}"
								position="{LogoPosition.TOP_RIGHT}" />
						</container:FieldSet>
						
						<!-- footer -->
						<container:FieldSet legend="{Message.get('configuration.logo.footer')}" width="100%">
							<component:CustomLogoConfigurationElement
								width="100%"
								defaultImage="{Images.FOOTER}"
								position="{LogoPosition.FOOTER}" />
						</container:FieldSet>
						
					</container:FieldSet>
				</s:VGroup>
			</s:Form>
		</s:VGroup>
	</s:Scroller>

</component:PopUp>

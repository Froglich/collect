<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s="library://ns.adobe.com/flex/spark" 
				  xmlns:mx="library://ns.adobe.com/flex/mx" 
				  xmlns:input="org.openforis.collect.ui.component.input.*"
				  xmlns:component="org.openforis.collect.ui.component.*"
				  >
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			
			import org.openforis.collect.event.UIEvent;
			import org.openforis.collect.i18n.Message;
			import org.openforis.collect.metamodel.proxy.CodeListItemProxy;
			import org.openforis.collect.util.CollectionUtil;
			
			public static const STATE_LOADING:String = "loading";
			public static const STATE_DEFAULT:String = "default";
			public static const STATE_VALUES_SORTING_ALLOWED:String = "valuesSortingAllowed";
			
			private var _multiple:Boolean = false;
			private var _editable:Boolean = true;
			private var _codeInputField:CodeInputField;
			private var _valuesRankingEnabled:Boolean = false;
			private var _items:IList = null;
			private var _selectedItems:ArrayCollection = null;
			private var _notSelectedItems:ArrayCollection = null;
			
			[Bindable]
			public function get multiple():Boolean {
				return _multiple;
			}

			public function set multiple(value:Boolean):void {
				_multiple = value;
			}

			[Bindable]
			public function get codeInputField():CodeInputField {
				return _codeInputField;
			}
			
			public function set codeInputField(value:CodeInputField):void {
				_codeInputField = value;
			}

			[Bindable]
			public function get editable():Boolean {
				return _editable;
			}
			
			public function set editable(value:Boolean):void {
				_editable = value;
			}
			
			[Bindable("itemsChanged")]
			public function get items():IList {
				return _items;
			}
			
			public function set items(value:IList):void {
				_items = value;
				if ( value != null ) {
					_selectedItems = new ArrayCollection();
					for each (var item:CodeListItemProxy in value) {
						if (item.selected) {
							_selectedItems.addItem(item);
						}
					}
					_notSelectedItems = new ArrayCollection(value.toArray());
					_notSelectedItems.filterFunction = function(item:CodeListItemProxy):Boolean {
						return ! (item.selected);
					}
					_notSelectedItems.refresh();
				} else {
					_selectedItems = _notSelectedItems = new ArrayCollection();
				}
				dispatchEvent(new Event("itemsChanged"));
			}

			[Bindable("itemsChanged")]
			public function get selectedItems():ArrayCollection {
				return _selectedItems;
			}
			
			public function set selectedItems(value:ArrayCollection):void {
				_selectedItems = value;
			}
			
			[Bindable("itemsChanged")]
			public function get notSelectedItems():ArrayCollection {
				return _notSelectedItems;
			}
			
			public function set notSelectedItems(value:ArrayCollection):void {
				_notSelectedItems = value;
			}
			
			public function selectionChangeHandler(event:UIEvent):void {
				var item:CodeListItemProxy = CodeListItemProxy(event.obj);
				if ( ! multiple ) {
					for each(var itm:Object in items) {
						if(itm != item) {
							//reset selection
							itm.selected = false;
						}
					}
				}
				if ( item.selected ) {
					_selectedItems.addItem(item);
				} else {
					CollectionUtil.removeItem(_selectedItems, item);
				}
			}
			
		]]>
	</fx:Script>
		
	<s:states>
		<s:State name="loading" />
		<s:State name="default" />
		<s:State name="valuesSortingAllowed" basedOn="default" />
	</s:states>
	
	<s:Group id="loadingContainer" includeIn="loading" itemCreationPolicy="immediate">
		<component:LoadingContent height="100" width="200" />
		<s:Button 
				id="cancelLoading" 
				bottom="0" 
				horizontalCenter="0" 
				useHandCursor="true" 
				buttonMode="true" 
				label="{Message.get('global.cancel')}" 
				/>
	</s:Group>
	
	<s:VGroup maxHeight="500" 
			  maxWidth="500" 
			  includeIn="default, valuesSortingAllowed"
			  itemCreationPolicy="immediate">
		<mx:ViewStack selectedIndex="0"
					  height="100%" 
					  width="100%"
					  selectedIndex.valuesSortingAllowed="1">
			
			<s:NavigatorContent height="100%" width="100%">
				
				<s:Scroller height="100%" width="100%">
					<input:CodeListDialogDataGroup
						id="dataGroup" 
						dataProvider="{items}"
						editable="{editable}"
						width="100%" 
						/>
				</s:Scroller>
			</s:NavigatorContent>
			
			<s:NavigatorContent height="100%" width="100%">
				<s:VGroup
					includeIn="valuesSortingAllowed"
					height="100%" 
					width="100%">
					
					<s:Label text="Select one or more values:&#13;(drag and drop selected items to reorder them)" />
					
					<s:Scroller width="100%"
								maxHeight="200">
						<input:CodeListDialogDataGroup
							id="selectedItemsDataGroup" 
							dataProvider="{selectedItems}"
							editable="{editable}"
							selectionChange="selectionChangeHandler(event)"
							width="100%" 
							/>
					</s:Scroller>
					
					<s:Line width="100%">
						<s:stroke>
							<s:SolidColorStroke color="#000000" weight="1" caps="square"/>
						</s:stroke>
					</s:Line>
					
					<s:Scroller width="100%"
								height="100%">
						<input:CodeListDialogDataGroup
							id="notSelectedItemsDataGroup" 
							dataProvider="{notSelectedItems}"
							selectionChange="selectionChangeHandler(event)"
							editable="{editable}"
							width="100%" 
							/>
					</s:Scroller>
					
				</s:VGroup>
				
			</s:NavigatorContent>
			
		</mx:ViewStack>
		
		<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle" gap="30">
			<s:Button id="applyButton"
					  useHandCursor="true" 
					  buttonMode="true" 
					  label="{Message.get('global.apply')}"
					  enabled="{editable}"
					  />
			<s:Button id="cancelButton"
					  useHandCursor="true"
					  buttonMode="true" 
					  label="{Message.get('global.cancel')}"  />
		</s:HGroup>
	</s:VGroup>
	
		
	
</s:TitleWindow>

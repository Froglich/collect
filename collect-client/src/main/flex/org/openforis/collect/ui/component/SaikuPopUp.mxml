<?xml version="1.0" encoding="utf-8"?>
<component:PopUp xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:component="org.openforis.collect.ui.component.*"
				 xmlns:container="org.openforis.collect.ui.container.*"
				 width="650"
				 title="{Message.get('home.saiku')}"
				 currentState="loading" 
				 >
	
	<fx:Script>
		<![CDATA[
			import com.shortybmc.utils.StringUtils;
			
			import org.openforis.collect.concurrency.CollectJobStatusPopUp;
			
			import flash.net.navigateToURL;
			
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.IResponder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.openforis.collect.Application;
			import org.openforis.collect.client.ClientFactory;
			import org.openforis.collect.i18n.Message;
			import org.openforis.collect.model.Configuration$ConfigurationItem;
			import org.openforis.collect.model.LogoPosition;
			import org.openforis.collect.model.proxy.ConfigurationProxy;
			import org.openforis.collect.presenter.JobMonitor;
			import org.openforis.collect.ui.Images;
			import org.openforis.collect.util.AlertUtil;
			import org.openforis.collect.util.ApplicationConstants;
			import org.openforis.collect.util.DateUtil;
			import org.openforis.collect.util.StringUtil;
			import org.openforis.concurrency.proxy.JobProxy;
			
			private var _initialized:Boolean;
			
			private var textInputToConfigurationItem:Dictionary;
			
			override protected function creationCompleteHandler(event:FlexEvent):void {
				super.creationCompleteHandler(event);
				_initialized = true;
				
				init();
			}
			
			private function init():void {
				currentState = "loadComplete";
				surveyList.dataProvider = Application.surveySummaries;
			}
			
			private function launchSaikuClickHandler(event:MouseEvent):void {
				navigateToURL(new URLRequest(ApplicationConstants.ROOT_URL + "saiku"), "_blank");
			}
			
			private function surveyChangeHandler(event:Event):void {
				updateSurveyRdbInfo();
			}
			
			private function updateSurveyRdbInfo():void {
				rdbLastUpdateTimestampLabel.text = "Loading...";
				var responder:AsyncResponder = new AsyncResponder(function(event:ResultEvent, token:Object = null):void {
					var date:Date = event.result;
					if (date != null) {
						rdbLastUpdateTimestampLabel.text = DateUtil.format(date);
					}
				}, null);
				ClientFactory.saikuClient.loadLastUpdateTime(responder, surveyList.selectedItem.name);
			}
			
			private function generateRdbClickHandler(event:MouseEvent):void {
				var responder:AsyncResponder = new AsyncResponder(function(event:ResultEvent, token:Object = null):void {
					var job:JobProxy = event.result;
					var jobMonitor:JobMonitor = new JobMonitor(job.id);
					CollectJobStatusPopUp.openPopUp();
					jobMonitor.start();
				}, null);
				ClientFactory.saikuClient.generateRdb(responder, surveyList.selectedItem.name);
			}
			
		]]>
	</fx:Script>
	
	<component:layout>
		<s:BasicLayout />
	</component:layout>

	<component:states>
		<s:State name="loading" />
		<s:State name="loadComplete" />
	</component:states>
	
	<component:LoadingContent includeIn="loading" />
	
	<s:VGroup gap="30" horizontalAlign="center" width="100%">
		<container:FieldSet legend="{Message.get('saiku.relational_database')}" width="100%">
			<s:Form width="100%" height="100%" includeIn="loadComplete" >
				<s:FormItem label="{Message.get('saiku.generate_rdb_for_survey')}">
					<s:DropDownList id="surveyList" labelField="name" width="300"
						change="surveyChangeHandler(event)" />
				</s:FormItem>
				<s:FormItem label="{Message.get('saiku.rdb_last_update_time')}:">
					<s:layout>
						<s:HorizontalLayout />
					</s:layout>
					<s:Label id="rdbLastUpdateTimestampLabel" text="..." width="200" />
					<s:Button id="generateRdbBtn" label="{Message.get('saiku.generate')}"
							  click="generateRdbClickHandler(event)"/>
				</s:FormItem>
			</s:Form>
		</container:FieldSet>
		<s:Button id="launchSaikuBtn" click="launchSaikuClickHandler(event)" label="{Message.get('saiku.launch')}" />
	</s:VGroup>

</component:PopUp>

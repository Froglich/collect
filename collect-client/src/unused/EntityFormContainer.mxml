<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" 
					xmlns:detail="org.openforis.collect.ui.component.detail.*"
					xmlns:layout="org.openforis.collect.ui.layout.*"
					xmlns:component="org.openforis.collect.ui.component.*" 
					width="100%" height="100%"
					creationComplete="creationCompleteHandler(event)"
					creationPolicy="all" 
					>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.collections.ListCollectionView;
			import mx.events.FlexEvent;
			
			import org.openforis.collect.Application;
			import org.openforis.collect.metamodel.proxy.EntityDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.ModelVersionProxy;
			import org.openforis.collect.metamodel.proxy.UITabProxy;
			import org.openforis.collect.model.proxy.EntityProxy;
			import org.openforis.collect.presenter.EntityFormPresenter;
			import org.openforis.collect.ui.UIBuilder;
			import org.openforis.collect.util.ApplicationConstants;
			import org.openforis.collect.util.CollectionUtil;
			import org.openforis.collect.util.StringUtil;
			import org.openforis.collect.util.UIUtil;
			
			public static const STATE_WITH_TABS:String = "withTabs";
			public static const STATE_WITHOUT_TABS:String = "withoutTabs";
			
			private const MAIN_TAB:Object = new Object();
		
			private var _modelVersion:ModelVersionProxy;
			private var _entityDefinition:EntityDefinitionProxy;
			private var _uiTabs:ListCollectionView;
			private var _definitionsPerTab:IList;
			private var _definitionsPerMainTab:IList;
			private var _parentEntity:EntityProxy;
			private var _entity:EntityProxy;
			private var _entities:IList;
			private var _forms:Array = new Array();
			
			private var _presenter:EntityFormPresenter;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				_presenter = new EntityFormPresenter(this);
			}
			
			public function build():void {
				var uiTab:UITabProxy = UIBuilder.getUITab(entityDefinition);
				var tabLabel:String = null;
				if ( uiTab != null ) {
					tabLabel = uiTab.labelText;
				}
				if ( StringUtil.isNotBlank(tabLabel) ) {
					this.label = tabLabel;
				} else {
					this.label = entityDefinition.getLabelText();
				}
				if(uiTab != null && CollectionUtil.isNotEmpty(uiTab.tabs) ) {
					uiTabs = uiTab.tabs;
					this.currentState = STATE_WITH_TABS;
				} else {
					this.currentState = STATE_WITHOUT_TABS;
				}
				initDefinitionsPerTab();
			}
			
			override public function set label(value:String):void {
				super.label = value;
			}
			
			/**
			 * Creates the list of node definitions per each tab
			 */
			private function initDefinitionsPerTab():void {
				if ( uiTabs != null ) {
					definitionsPerTab = UIBuilder.getDefinitionsPerEachSubTab(entityDefinition, modelVersion);
				} else {
					definitionsPerMainTab = UIBuilder.getDefinitionsPerMainTab(entityDefinition, modelVersion);
				}
			}
			
			public function resetScrollbars():void {
				if(currentState == STATE_WITH_TABS) {
					for each(var form:ScrollableFormContainer in formContainers) {
						form.resetScrollBars();
					}
				} else {
					withoutTabsContainer.resetScrollBars();
				}
			}
			
			[Bindable]
			public function get entityDefinition():EntityDefinitionProxy {
				return _entityDefinition;
			}

			public function set entityDefinition(value:EntityDefinitionProxy):void {
				_entityDefinition = value;
			}

			[Bindable]
			public function get modelVersion():ModelVersionProxy {
				return _modelVersion;
			}
			
			public function set modelVersion(value:ModelVersionProxy):void {
				_modelVersion = value;
			}

			[Bindable]
			public function get uiTabs():ListCollectionView {
				return _uiTabs;
			}

			public function set uiTabs(value:ListCollectionView):void {
				_uiTabs = value;
			}

			[Bindable]
			public function get parentEntity():EntityProxy {
				return _parentEntity;
			}
			
			public function set parentEntity(value:EntityProxy):void {
				_parentEntity = value;
			}
			
			[Bindable]
			public function get entity():EntityProxy {
				return _entity;
			}
			
			public function set entity(value:EntityProxy):void {
				_entity = value;
			}
			
			[Bindable]
			public function get definitionsPerTab():IList {
				return _definitionsPerTab;
			}
			
			public function set definitionsPerTab(value:IList):void {
				_definitionsPerTab = value;
			}

			[Bindable]
			public function get definitionsPerMainTab():IList {
				return _definitionsPerMainTab;
			}

			public function set definitionsPerMainTab(value:IList):void {
				_definitionsPerMainTab = value;
			}

			[Bindable]
			public function get entities():IList {
				return _entities;
			}
			
			public function set entities(value:IList):void {
				_entities = value;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<s:Fade id="showFormEffect" 
				duration="600" 
				alphaFrom="0" 
				alphaTo="1"
				/>
		
		<s:Fade id="hideFormEffect" 
				duration="400" 
				alphaFrom="1" 
				alphaTo="0"
				/>
		
	</fx:Declarations>
	
	<s:states>
		<s:State name="withoutTabs" />
		<s:State name="withTabs" />
	</s:states>
	
	<s:BorderContainer styleName="entityForm"
			width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout gap="4" />
		</s:layout>
		<component:AddEntityControlBar id="addSection"
									   entityDefinition="{entityDefinition}"
									   entities="{entities}"
									   includeInLayout="{entityDefinition.multiple &amp;&amp; entityDefinition.parent != null
									   		&amp;&amp; entityDefinition.layout == UIUtil.LAYOUT_FORM}" 
									   visible="{entityDefinition.multiple &amp;&amp; entityDefinition.parent != null
									   		&amp;&amp; entityDefinition.layout == UIUtil.LAYOUT_FORM}" />
		<s:Group id="internalContainer" 
				 height="100%" width="100%"
				 showEffect="{showFormEffect}" 
				 hideEffect="{hideFormEffect}"
				 >
			<s:VGroup id="tabbedContainer" 
					  width="100%" height="100%" 
					  gap="0" 
					  includeIn="withTabs"
					  >
				<s:TabBar id="tabBar" 
						  dataProvider="{viewStack}"
						  width="100%">
					<s:layout>
						<layout:FlowLayout />
					</s:layout>
				</s:TabBar>
				
				<s:BorderContainer
					width="100%" 
					height="100%"
					styleName="entityForm"
					>
					<mx:ViewStack id="viewStack" width="100%" height="100%" 
								  verticalGap="0"
								  creationPolicy="auto">
						<mx:Repeater id="tabsRP" dataProvider="{uiTabs}">
							<detail:ScrollableFormContainer 
								id="formContainers"
								modelVersion="{modelVersion}"
								entityDefinition="{entityDefinition}"
								nodeDefinitions="{IList(definitionsPerTab.getItemAt(tabsRP.currentIndex))}"
								entity="{entity}"
								label="{UITabProxy(tabsRP.currentItem).labelText}"
								/>
						</mx:Repeater>
					</mx:ViewStack>
				</s:BorderContainer>
			</s:VGroup>
			<detail:ScrollableFormContainer 
				id="withoutTabsContainer"
				modelVersion="{modelVersion}"
				entityDefinition="{entityDefinition}"
				nodeDefinitions="{definitionsPerMainTab}"
				entity="{entity}"
				includeIn="withoutTabs"
				/>
		</s:Group>			
	</s:BorderContainer>
</s:NavigatorContent>
